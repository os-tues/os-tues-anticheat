name: Generate Plagiarism Reports
on:
  schedule:
    - cron: 0 0 * * * # Runs daily at midnight UTC
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  generate-plagiarism-reports:
    runs-on: ubuntu-latest

    steps:
      - name: Install classroom extension for GitHub CLI
        id: install_classroom_extension
        run: |
          gh extension install github/gh-classroom

      - name: Get all "os-tues" GitHub Classrooms
        id: get_all_classrooms
        run: |
          # Get all classrooms using the GitHub CLI
          CLASSROOMS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /classrooms)

          # Filter out classrooms without "os-tues" in the name
          CLASSROOMS=$(echo "$CLASSROOMS" | jq '[.[] | select(.name | test("os-tues"))]')

          # Add $CLASSROOMS to workflow environment
          echo CLASSROOMS=$CLASSROOMS
          echo CLASSROOMS=$CLASSROOMS >> $GITHUB_ENV

      - name: Get assignments from each classrooms
        id: get_assignments
        run: |
          # Get the IDs of all classrooms
          classroom_ids=$(echo "$CLASSROOMS" | jq -r '.[] | .id')
          ASSIGNMENTS="[]"

          # Get all assignments for each classroom
          for assignment_id in $classroom_ids; do
            classroom_assignments=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/classrooms/$assignment_id/assignments")

            ASSIGNMENTS=$(echo "$ASSIGNMENTS" | jq --argjson new_assignments "$classroom_assignments" '. + $new_assignments')
          done

          # Add $ASSIGNMENTS to workflow environment
          echo ASSIGNMENTS=$ASSIGNMENTS
          echo ASSIGNMENTS=$ASSIGNMENTS >> $GITHUB_ENV

      - name: Get a list of assignments, which have new submissions since the last check
        id: get_assignments_with_new_submissions
        run: |
          # Get the IDs of all classrooms
          assignment_ids=$(echo "$ASSIGNMENTS" | jq -r '.[] | .id')
          echo "$assignment_ids"

          ASSIGNMENT_IDS_TO_BE_RECOMPUTED="[]"

          # Loop through each assignment ID
          for assignment_id in $assignment_ids; do
            # Get all submissions for an assignment
            assignment_submissions=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/assignments/$assignment_id/accepted_assignments")

            # Use GitHub CLI to fetch the latest commit hash for each submission repository and store it in a file
            echo "[commits]" > "$assignment_id-latest-commits.toml"
            echo "$assignment_submissions" | jq -r '.[].repository.full_name' | while read -r repo; do
              latest_commit=$(gh api \
                -H "Accept: application/vnd.github+json" \
                "/repos/$repo/commits" | jq -r '.[0].sha')

              echo "$repo = $latest_commit" >> "$assignment_id-latest-commits.toml"
            done

            # Sort the list of commits
            sort -n "$assignment_id-latest-commits.toml" --output "$assignment_id-latest-commits.toml"

            # Check if there are any new commits since the last check
            if ! diff "$assignment_id-latest-commits.toml" "$assignment_id-computed-commits.toml" > /dev/null; then
              echo "New submissions detected for assignment $assignment_id."
              ASSIGNMENT_IDS_TO_BE_RECOMPUTED=$(echo "$ASSIGNMENT_IDS_TO_BE_RECOMPUTED" | jq --argjson id "$assignment_id" '. + [$id]')
            fi
          done

          # Add $ASSIGNMENT_IDS_TO_BE_RECOMPUTED to workflow environment
          echo ASSIGNMENT_IDS_TO_BE_RECOMPUTED=$ASSIGNMENT_IDS_TO_BE_RECOMPUTED
          echo ASSIGNMENT_IDS_TO_BE_RECOMPUTED=$ASSIGNMENT_IDS_TO_BE_RECOMPUTED >> "$GITHUB_ENV"

      - name: Clone all repositories of the assignments with new submissions
        id: clone_assignment_repositories
        run: |
          assignment_to_recompute=$(echo "$ASSIGNMENT_IDS_TO_BE_RECOMPUTED" | jq -r '.[]')

          # Clone all repositories with new submissions
          for assignment_id in $assignment_to_recompute; do
            gh classroom clone student-repos -a $assignment_id
          done

      - name: Get assignment repository names
        id: get_assignment_repository_names
        run: |
          # Find assignment names (slugs) from the $ASSIGNMENTS list
          ASSIGNMENT_NAMES_TO_BE_RECOMPUTED=$(echo "$ASSIGNMENTS" | jq --argjson ids "$ASSIGNMENT_IDS_TO_BE_RECOMPUTED" '
            [.[] | select(.id as $id | $ids | index($id)) | .slug]
          ')

          # Add $ASSIGNMENT_NAMES_TO_BE_RECOMPUTED to workflow environment
          echo ASSIGNMENT_NAMES_TO_BE_RECOMPUTED=$ASSIGNMENT_NAMES_TO_BE_RECOMPUTED
          echo ASSIGNMENT_NAMES_TO_BE_RECOMPUTED=$ASSIGNMENT_NAMES_TO_BE_RECOMPUTED >> "$GITHUB_ENV"

      - name: Zip assignment repository files
        id: zip_assignment_repository_files
        run: |
          assignment_to_recompute=$(echo "$ASSIGNMENT_NAMES_TO_BE_RECOMPUTED" | jq -r '.[]')

          # Zip all assignment files
          for assignment_name in $assignment_to_recompute; do
            # TODO: Adjust file types
            zip -r $assignment_name.zip . -i $assignment_name-submissions/**/*.c
          done

      - name: Request plagiarism reports
        id: request_plagiarism_reports
        run: |
          assignment_to_recompute=$(echo "$ASSIGNMENT_NAMES_TO_BE_RECOMPUTED" | jq -r '.[]')
          REPORTS="[]"

          for assignment_name in $assignment_to_recompute; do
            # Request plagiarism report
            response=$(curl \
              -F "dataset[name]=$assignment_name" \
              -F "dataset[zipfile]=@./$assignment_name.zip" \
              -F "dataset[programming_language]=" \
              https://dolos.ugent.be/api/reports)

            # Parse response
            assignment_id=$(echo "$ASSIGNMENTS" | jq --arg name "$assignment_name" -r '.[] | select(.slug == $name) | .id')
            report_url=$(echo "$response" | jq -r '.html_url')
            report_date=$(echo "$response" | jq -r '.dataset.created_at')

            # Add the report to list of reports
            REPORTS=$(echo "$REPORTS" | jq --argjson new_report "{\"assignment_id\": \"$assignment_id\", \"report_url\": \"$report_url\", \"report_date\": \"$report_date\"}" '. + [$new_report]')
          done

          # Add $REPORTS to workflow environment
          echo REPORTS=$REPORTS
          echo REPORTS=$REPORTS >> "$GITHUB_ENV"
